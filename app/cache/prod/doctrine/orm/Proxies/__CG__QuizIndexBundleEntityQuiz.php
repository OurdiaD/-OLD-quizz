<?php

namespace Proxies\__CG__\Quiz\IndexBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Quiz extends \Quiz\IndexBundle\Entity\Quiz implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'id', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'category', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'question', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse1', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse2', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse3', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse4', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'activate'];
        }

        return ['__isInitialized__', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'id', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'category', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'question', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse1', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse2', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse3', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'reponse4', '' . "\0" . 'Quiz\\IndexBundle\\Entity\\Quiz' . "\0" . 'activate'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Quiz $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestion($question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestion', [$question]);

        return parent::setQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestion', []);

        return parent::getQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponse1($reponse1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponse1', [$reponse1]);

        return parent::setReponse1($reponse1);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponse1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponse1', []);

        return parent::getReponse1();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponse2($reponse2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponse2', [$reponse2]);

        return parent::setReponse2($reponse2);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponse2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponse2', []);

        return parent::getReponse2();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponse3($reponse3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponse3', [$reponse3]);

        return parent::setReponse3($reponse3);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponse3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponse3', []);

        return parent::getReponse3();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponse4($reponse4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponse4', [$reponse4]);

        return parent::setReponse4($reponse4);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponse4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponse4', []);

        return parent::getReponse4();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivate($activate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivate', [$activate]);

        return parent::setActivate($activate);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivate', []);

        return parent::getActivate();
    }

}
